#include<SFML/Graphics.hpp>
#include<SFML/Audio.hpp>
#include<iostream>
#include<fstream>
#include<sstream>

using namespace sf;
using namespace std;

int main()
{
    RenderWindow window(VideoMode(600, 750), " ", Style::Close);
    window.setFramerateLimit(60);
    //window.setVerticalSyncEnabled(true);


    //variables
    int arr[21][19];
    int pacmanScore = 0;
    bool KeyPressed = false;
    float directionX = 0.0, directionY = 0.0;              // Pac-man move


    //Shapes
    RectangleShape start;
    start.setSize(Vector2f(600, 600));
    start.setPosition(0, 90);

    CircleShape pacman;
    pacman.setRadius(12);
    pacman.setPosition(288, 521);

    RectangleShape line;
    line.setSize(Vector2f(4, 31.5));
    line.setFillColor(Color(220, 171, 187));
    line.setPosition(316, 330);
    line.rotate(90);


    //Textures
    Texture background;
    background.loadFromFile("Data/PAC-MAN-Game.jpg");

    Texture brick;
    brick.loadFromFile("Data/brick2.jpg");

    //Pac-Man Textures

    Texture right;
    right.loadFromFile("Data/pacman-right.jpeg");

    Texture left;
    left.loadFromFile("Data/pacman-left.jpeg");

    Texture up;
    up.loadFromFile("Data/pacman-up.jpeg");

    Texture down;
    down.loadFromFile("Data/pacman-down.jpeg");

    //Ghosts Textures

    Texture blinky;
    blinky.loadFromFile("Data/blinky.jpeg");

    Texture inky;
    inky.loadFromFile("Data/inky.jpeg");

    Texture pinky;
    pinky.loadFromFile("Data/pinky.jpeg");

    Texture clyde;
    clyde.loadFromFile("Data/clyde.jpeg");


    //Fonts
    Font first;
    first.loadFromFile("Data/arial.ttf");


    //Sprites
    Sprite blinky1;
    blinky1.setPosition(288, 291);

    Sprite pinky1;
    pinky1.setPosition(288, 348);

    Sprite inky1;
    inky1.setPosition(255, 348);

    Sprite clyde1;
    clyde1.setPosition(321, 348);


    //Set Textures
    start.setTexture(&background);
    pacman.setTexture(&left);

    blinky1.setTexture(blinky);
    pinky1.setTexture(pinky);
    clyde1.setTexture(clyde);
    inky1.setTexture(inky);


    //Text
    Text tap;
    tap.setFont(first);
    tap.setFillColor(Color::Yellow);
    tap.setString("TAP TO START!");
    tap.setCharacterSize(30);
    tap.setPosition(200, 450);

    Text score;
    score.setFont(first);
    score.setFillColor(Color::Transparent);
    score.setStyle(Text::Bold);
    score.setCharacterSize(25);
    score.setPosition(40, 30);


    //DRAWING THE MAP
    ifstream boardfile("Data/board2.txt");
    if (boardfile.is_open()) {
        for (int i = 0; i < 21; i++) {
            for (int j = 0; j < 19; j++) {
                boardfile >> arr[i][j];
            }
        }
    }

    RectangleShape board[21][19];
    CircleShape dot[21][19];

    float xposBoard = 0.0, yposBoard = 90.0;
    float xposDot = 0.0, yposDot = 0.0;

    for (int i = 0; i < 21; i++)
    {
        for (int j = 0; j < 19; j++)
        {
            board[i][j].setPosition(xposBoard, yposBoard);
            board[i][j].setSize(Vector2f(31.57, 28.57));
            dot[i][j].setPosition(xposDot, yposDot);
            dot[i][j].setRadius(3);

            if (arr[i][j] == 1)
            {
                board[i][j].setTexture(&brick);
            }
            else if (arr[i][j] == 0)
            {
                dot[i][j].setFillColor(Color(220, 171, 187));
            }
            else if (arr[i][j] == 3)
            {
                dot[i][j].setFillColor(Color(220, 171, 187));
                dot[i][j].setRadius(6);
            }
            xposBoard += 31.57;
            xposDot = xposBoard + 15.78;
        }
        yposBoard += 28.57;
        yposDot = yposBoard + 14.27;
        xposBoard = 0, xposDot = 0;
    }

    //Game loop
    while (window.isOpen())
    {
        Event event;
        while (window.pollEvent(event))
        {
            if (event.type == Event::Closed)
                window.close();

            if (event.type == Event::KeyPressed)
                KeyPressed = true;

            if (KeyPressed)
            {
                start.setFillColor(Color::Transparent);
                tap.setFillColor(Color::Transparent);

                score.setFillColor(Color::White);
            }
        }

        pacman.move(directionX, directionY);

        for (int i = 0; i < 21; i++) {
            for (int j = 0; j < 19; j++) {
                if (pacman.getGlobalBounds().intersects(dot[i][j].getGlobalBounds()) && dot[i][j].getFillColor() == (Color(220, 171, 187))) {
                    if (arr[i][j] == 3)
                    {
                        pacmanScore += 50;
                        dot[i][j].setFillColor(Color::Transparent);
                    }
                    else
                    {
                        pacmanScore += 10;
                        dot[i][j].setFillColor(Color::Transparent);
                    }
                }
                if (pacman.getGlobalBounds().intersects(board[i][j].getGlobalBounds()))
                {
                    if (arr[i][j] == 1)
                    {
                        pacman.move(Vector2f(-directionX, -directionY));
                    }
                }
            }
        }

        if (Keyboard::isKeyPressed(Keyboard::Up))
        {
            directionX = 0.0, directionY = -1.0;
            pacman.setTexture(&up);
        }
        if (Keyboard::isKeyPressed(Keyboard::Down))
        {
            directionX = 0.0, directionY = 1.0;
            pacman.setTexture(&down);
        }
        if (Keyboard::isKeyPressed(Keyboard::Left))
        {
            directionX = -1.0, directionY = 0.0;
            pacman.setTexture(&left);
        }
        if (Keyboard::isKeyPressed(Keyboard::Right))
        {
            directionX = 1.0, directionY = 0.0;
            pacman.setTexture(&right);
        }
        if (pacman.getPosition().x >= 575 && pacman.getPosition().y == 349)
        {
            pacman.setPosition(0, 349);
        }
        else if (pacman.getPosition().x <= 0 && pacman.getPosition().y == 349)
        {
            pacman.setPosition(575, 349);
        }

        //rendering

        window.clear();

        for (int i = 0; i < 21; i++)
        {
            for (int j = 0; j < 19; j++)
            {
                if (arr[i][j] == 1)
                {
                    window.draw(board[i][j]);
                }
                if ( arr[i][j] == 0 || arr[i][j] == 3 )
                {
                    window.draw(dot[i][j]);
                }
            }
        }

        window.draw(pacman);

        window.draw(blinky1);
        window.draw(inky1);
        window.draw(pinky1);
        window.draw(clyde1);

        window.draw(line);

        //SCORE
        stringstream text;
        text << "Score : " << pacmanScore;
        score.setString(text.str());
        window.draw(score);

        window.draw(start);
        window.draw(tap);

        window.display();

    }
    return 0;
}
