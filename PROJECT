#include<SFML/Graphics.hpp>
#include<SFML/Audio.hpp>
#include<iostream>
#include<fstream>
#include<sstream>

using namespace sf;
using namespace std;


void computeScore(CircleShape& pacman, int& score, int arr[21][19], CircleShape dot[21][19]) {
    for (int i = 0; i < 21; i++) {
        for (int j = 0; j < 19; j++) {
            if (pacman.getGlobalBounds().intersects(dot[i][j].getGlobalBounds()) && dot[i][j].getFillColor() == (Color(220, 171, 187))) {

                if (arr[i][j] == 3) {
                    score += 50;
                    cout << "EAT\n";
                    cout << score << endl;
                }
                if (arr[i][j] == 0) {
                    score += 10;
                    cout << "eat\n";
                    cout << score << endl;

                }
                dot[i][j].setFillColor(Color::Transparent);
            }
        }
    }
}

void collision(CircleShape& pacman, int arr[21][19], RectangleShape board[21][19], float& directionX, float& directionY) {
    for (int i = 0; i < 21; i++) {
        for (int j = 0; j < 19; j++) {
            if (pacman.getGlobalBounds().intersects(board[i][j].getGlobalBounds())) {
                if (arr[i][j] == 1) {
                    pacman.move(-directionX, -directionY);
                }
            }
        }
    }
}

void ghostCollision(CircleShape& pacman, Sprite& blinky, Sprite& pinky, Sprite& inky, Sprite& clyde, float& directionX, float& directionY, int& liveCounter) {
    if (pacman.getGlobalBounds().intersects(blinky.getGlobalBounds())) {
        pacman.setPosition(288, 521);
        directionX = 0; directionY = 0;
        liveCounter++;
    }
    if (pacman.getGlobalBounds().intersects(pinky.getGlobalBounds())) {
        pacman.setPosition(288, 521);
        directionX = 0; directionY = 0;
        liveCounter++;
    }
    if (pacman.getGlobalBounds().intersects(inky.getGlobalBounds())) {
        pacman.setPosition(288, 521);
        directionX = 0; directionY = 0;
        liveCounter++;
    }
    if (pacman.getGlobalBounds().intersects(clyde.getGlobalBounds())) {
        pacman.setPosition(288, 521);
        directionX = 0; directionY = 0;
        liveCounter++;
    }

}

void recreateDots(int arr[21][19], CircleShape dot[21][19]) {
    for (int i = 0; i < 21; i++) {
        for (int j = 0; j < 19; j++) {
            if (arr[i][j] == 0 && dot[i][j].getFillColor() == Color::Transparent) {
                dot[i][j].setFillColor(Color(220, 171, 187));
            }

            else if (arr[i][j] == 3 && dot[i][j].getFillColor() == Color::Transparent) {
                dot[i][j].setFillColor(Color(220, 171, 187));
            }
        }
    }
}




int main()
{
    RenderWindow window(VideoMode(600, 750), " ", Style::Close);
    window.setFramerateLimit(60);
    //window.setVerticalSyncEnabled(true);


    //variables
    int arr[21][19];
    int pacmanScore = 0;
    bool KeyPressed = false;
    float directionX = 0.0, directionY = 0.0;              // Pac-man move
    int liveCounter = 0;


    //Shapes
    RectangleShape start;
    start.setSize(Vector2f(600, 600));
    start.setPosition(0, 90);

    CircleShape pacman;
    pacman.setRadius(12);
    pacman.setPosition(288, 521);

    CircleShape firstlive;
    firstlive.setRadius(14);
    firstlive.setPosition(5, 705);

    CircleShape secondlive;
    secondlive.setRadius(14);
    secondlive.setPosition(37, 705);

    RectangleShape line;
    line.setSize(Vector2f(4, 31.5));
    line.setFillColor(Color(220, 171, 187));
    line.setPosition(316, 330);
    line.rotate(90);


    //Textures
    Texture background;
    background.loadFromFile("Data/PAC-MAN-Game.jpg");

    Texture brick;
    brick.loadFromFile("Data/brick2.jpg");

    //Pac-Man Textures

    Texture right;
    right.loadFromFile("Data/pacman-right.jpeg");

    Texture left;
    left.loadFromFile("Data/pacman-left.jpeg");

    Texture up;
    up.loadFromFile("Data/pacman-up.jpeg");

    Texture down;
    down.loadFromFile("Data/pacman-down.jpeg");

    //Ghosts Textures

    Texture blinkyTexture;
    blinkyTexture.loadFromFile("Data/blinky.jpeg");

    Texture inkyTexture;
    inkyTexture.loadFromFile("Data/inky.jpeg");

    Texture pinkyTexture;
    pinkyTexture.loadFromFile("Data/pinky.jpeg");

    Texture clydeTexture;
    clydeTexture.loadFromFile("Data/clyde.jpeg");

    firstlive.setTexture(&left);
    secondlive.setTexture(&left);


    //Fonts
    Font first;
    first.loadFromFile("Data/arial.ttf");

    //Text
    Text tap;
    tap.setFont(first);
    tap.setFillColor(Color::Yellow);
    tap.setString("TAP TO START!");
    tap.setCharacterSize(30);
    tap.setPosition(200, 450);

    Text score;
    score.setFont(first);
    score.setFillColor(Color::Transparent);
    score.setStyle(Text::Bold);
    score.setCharacterSize(25);
    score.setPosition(40, 30);

    Text level1Text;
    level1Text.setFont(first);
    level1Text.setFillColor(Color::White);
    level1Text.setStyle(Text::Bold);
    level1Text.setString("Level 1");
    level1Text.setCharacterSize(28);
    level1Text.setPosition(455, 700);

    Text GameOverText;
    GameOverText.setFont(first);
    GameOverText.setPosition(220, 400);
    GameOverText.setString("GAME OVER!");
    GameOverText.setFillColor(Color::Transparent);

    Text ReadyText;
    ReadyText.setFont(first);
    ReadyText.setPosition(220, 400);
    ReadyText.setString("READY");
    ReadyText.setFillColor(Color::White);


    //Sprites
    Sprite blinkySprite;
    blinkySprite.setPosition(288, 291);

    Sprite pinkySprite;
    pinkySprite.setPosition(288, 348);

    Sprite inkySprite;
    inkySprite.setPosition(255, 348);

    Sprite clydeSprite;
    clydeSprite.setPosition(321, 348);


    //Set Textures
    start.setTexture(&background);
    pacman.setTexture(&left);

    blinkySprite.setTexture(blinkyTexture);
    pinkySprite.setTexture(pinkyTexture);
    clydeSprite.setTexture(clydeTexture);
    inkySprite.setTexture(inkyTexture);





    //DRAWING THE MAP
    ifstream boardfile("Data/board2.txt");
    if (boardfile.is_open()) {
        for (int i = 0; i < 21; i++) {
            for (int j = 0; j < 19; j++) {
                boardfile >> arr[i][j];
            }
        }
    }

    RectangleShape board[21][19];
    CircleShape dot[21][19];

    float xposBoard = 0.0, yposBoard = 90.0;
    float xposDot = 0.0, yposDot = 0.0;

    for (int i = 0; i < 21; i++)
    {
        for (int j = 0; j < 19; j++)
        {
            board[i][j].setPosition(xposBoard, yposBoard);
            board[i][j].setSize(Vector2f(31.57, 28.57));
            dot[i][j].setPosition(xposDot, yposDot);
            dot[i][j].setRadius(3);

            if (arr[i][j] == 1)
            {
                board[i][j].setTexture(&brick);
            }
            else if (arr[i][j] == 0)
            {
                dot[i][j].setFillColor(Color(220, 171, 187));
            }
            else if (arr[i][j] == 3)
            {
                dot[i][j].setFillColor(Color(220, 171, 187));
                dot[i][j].setRadius(6);
            }
            xposBoard += 31.57;
            xposDot = xposBoard + 15.78;
        }
        yposBoard += 28.57;
        yposDot = yposBoard + 14.27;
        xposBoard = 0, xposDot = 0;
    }

    //Game loop
    while (window.isOpen())
    {
        Event event;
        while (window.pollEvent(event))
        {
            if (event.type == Event::Closed) {
                window.close();
            }

            if (event.type == Event::KeyPressed) {
                KeyPressed = true;
            }
            if (KeyPressed) {
                start.setFillColor(Color::Transparent);
                tap.setFillColor(Color::Transparent);
                score.setFillColor(Color::White);
            }
            if (Mouse::isButtonPressed(Mouse::Left)) {
                Vector2i mousepos = Mouse::getPosition(window);
                printf("x = %i, y = %i\n", mousepos.x, mousepos.y);
            }
            if (pacmanScore == 1660) {
                recreateDots(arr, dot);
                pacman.setPosition(288, 521);
               
            }
        }
        
        pacman.move(directionX, directionY);
        computeScore(pacman, pacmanScore, arr, dot);
        collision(pacman, arr, board, directionX, directionY);
        ghostCollision(pacman, blinkySprite, pinkySprite, inkySprite, clydeSprite, directionX, directionY, liveCounter);

       

        if (Keyboard::isKeyPressed(Keyboard::Up)) {
            cout << "up\n";
            directionX = 0; directionY = -2;
            pacman.setTexture(&up);

        }
        else if (Keyboard::isKeyPressed(Keyboard::Down)) {
            cout << "down\n";
            directionX = 0; directionY = 2;
            pacman.setTexture(&down);
        }
        else if (Keyboard::isKeyPressed(Keyboard::Left)) {
            cout << "left\n";
            directionX = -2; directionY = 0;
            pacman.setTexture(&left);


        }
        else if (Keyboard::isKeyPressed(Keyboard::Right)) {
            cout << "right\n";
            directionX = 2; directionY = 0;
            pacman.setTexture(&right);

        }

        if (pacman.getPosition().x >= 599 && (pacman.getPosition().y >= 349 || pacman.getPosition().y <= 375)) {
            pacman.setPosition(0, 349);
        }
        else if (pacman.getPosition().x <= 0 && (pacman.getPosition().y >= 349 || pacman.getPosition().y <= 373)) {
            pacman.setPosition(575, 349);
        }

        if (liveCounter == 1) {
            secondlive.setFillColor(Color::Transparent);
        }
        else if (liveCounter == 2) {
            firstlive.setFillColor(Color::Transparent);
        }

        else if (liveCounter == 3) {
            GameOverText.setFillColor(Color::Red);
            blinkySprite.setColor(Color::Transparent);
            pinkySprite.setColor(Color::Transparent);
            inkySprite.setColor(Color::Transparent);
            clydeSprite.setColor(Color::Transparent);
            pacman.setFillColor(Color::Transparent);
            directionX = 0; directionY = 0;
        }




        //rendering

        window.clear();

        for (int i = 0; i < 21; i++)
        {
            for (int j = 0; j < 19; j++)
            {
                if (arr[i][j] == 1)
                {
                    window.draw(board[i][j]);
                }
                if (arr[i][j] == 0 || arr[i][j] == 3)
                {
                    window.draw(dot[i][j]);
                }
            }
        }

        window.draw(pacman);
        window.draw(blinkySprite);
        window.draw(inkySprite);
        window.draw(pinkySprite);
        window.draw(clydeSprite);
        window.draw(line);


        //SCORE
        stringstream text;
        text << "Score : " << pacmanScore;
        score.setString(text.str());
        window.draw(score);

        if (KeyPressed)
        {
            window.draw(firstlive);
            window.draw(secondlive);
            window.draw(level1Text);

        }
        window.draw(GameOverText);
        window.draw(start);
        window.draw(tap);
        window.display();

    }
    return 0;
}
